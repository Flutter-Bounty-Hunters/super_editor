import 'package:flutter/widgets.dart';

/// Prevents a [PrioritizedIntents] from bubbling up.
///
/// Flutter uses [PrioritizedIntents] to configure a single activator for multiple possible [Intent]s,
/// where the first available [Intent] is executed. For example, when a user presses the SPACE key, either an
/// [ActivateIntent] or a [ScrollIntent] can be executed.
///
/// When the provided [intentFilter] returns `true` for at least one of the `PrioritizedIntents.orderedIntents`,
/// the [Intent] is prevented from bubbling up.
///
/// Based on [PrioritizedAction].
class PreventPrioritizedIntentsFromBubblingUp extends Action<PrioritizedIntents> {
  PreventPrioritizedIntentsFromBubblingUp({
    required this.intentFilter,
  });

  /// Whether the [intent] should be prevented from bubbling up.
  final bool Function(Intent intent) intentFilter;

  @override
  bool consumesKey(Intent intent) => false;

  @override
  void invoke(Intent intent) {}

  @override
  bool isEnabled(PrioritizedIntents intent, [BuildContext? context]) {
    final FocusNode? focus = primaryFocus;
    if (focus == null || focus.context == null) {
      return false;
    }

    for (final Intent candidateIntent in intent.orderedIntents) {
      final Action<Intent>? candidateAction = Actions.maybeFind<Intent>(
        focus.context!,
        intent: candidateIntent,
      );
      if (candidateAction != null && _isActionEnabled(candidateAction, candidateIntent, context)) {
        // The corresponding Action for the Intent is enabled.
        // This is the Action that Flutter will execute.
        if (intentFilter(candidateIntent)) {
          return true;
        }

        // We don't care about the Intent that is going to have its corresponding Action executed.
        // Don't block it.
        return false;
      }
    }

    return false;
  }

  bool _isActionEnabled(Action action, Intent intent, BuildContext? context) {
    if (action is ContextAction<Intent>) {
      return action.isEnabled(intent, context);
    }
    return action.isEnabled(intent);
  }
}

/// Stop propagating intents that prevent text input.
///
/// These intents have default handlers installed by Flutter
/// that prevents the key events from bubbling up to the IME.
///
/// Use this object in an [Actions] widget.
///
/// See [WidgetsApp.defaultShortcuts] for the list of keybindings that Flutter
/// adds by default.
final Map<Type, Action<Intent>> disabledNonAppleIntents = {
  // Generated by pressing SPACE.
  //
  // On web, pressing SPACE can trigger either an `ActivateIntent` or a `ScrollIntent`,
  // so we need to check for both of them.
  //
  // PrioritizedIntents might contain intents that we don't want to prevent
  // from bubbling up. So, we need to look into its inner intents.
  PrioritizedIntents: PreventPrioritizedIntentsFromBubblingUp(
    intentFilter: (e) => e is ActivateIntent || e is ScrollIntent,
  ),
};
